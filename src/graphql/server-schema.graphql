type Query {
  guessGender(name: String): Gender

  getCountry(countryCode: String): Country

  getAllPlayers: [NBAPlayer]
}

type Mutation {
  "the position string value should be one of the five options: ['PG', 'SG', 'SF', 'PF', 'C']"
  createPlayer(
    firstName: String!
    lastName: String!
    age: Int!
    jerseyNum: Int
    position: String
  ): NBAPlayer!
}
type Gender {
  gender: String
  name: String
  probability: Float
}
type Language {
  code: ID!
  name: String
  native: String
  rtl: Boolean!
}

type Continent {
  code: ID!
  countries: [Country!]!
  name: String!
}

type State {
  code: String
  country: Country!
  name: String!
}

type Country {
  capital: String
  code: ID!
  currency: String
  emoji: String!
  emojiU: String!
  languages: [Language!]!
  name: String!
  native: String!
  phone: String!
  states: [State!]!
  continent: Continent!
}
"Five positions available on Basketball court"
enum NBAPlayerPosition {
  "e.g. CP3, Dame, Steph Curry"
  PointGuard
  "e.g. KOBE, MJ, WADE"
  ShootGuard
  "e.g. LBJ, KD"
  SmallForward
  "e.g. Tim Duncan, KG"
  PowerForward
  "e.g. SHAQ, YAO"
  Center
}

type NBAPlayer {
  id: ID
  firstName: String
  lastName: String
  age: Int
  position: NBAPlayerPosition
  jerseyNumber: Int
}
